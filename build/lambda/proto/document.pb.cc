// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lambda/proto/document.proto

#include "lambda/proto/document.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace search_engine {
PROTOBUF_CONSTEXPR ForwardDataField::ForwardDataField(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ForwardDataFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForwardDataFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForwardDataFieldDefaultTypeInternal() {}
  union {
    ForwardDataField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForwardDataFieldDefaultTypeInternal _ForwardDataField_default_instance_;
PROTOBUF_CONSTEXPR Document_FieldInfoEntry_DoNotUse::Document_FieldInfoEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Document_FieldInfoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Document_FieldInfoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Document_FieldInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Document_FieldInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Document_FieldInfoEntry_DoNotUseDefaultTypeInternal _Document_FieldInfoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Document_ForwardDataEntry_DoNotUse::Document_ForwardDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Document_ForwardDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Document_ForwardDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Document_ForwardDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Document_ForwardDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Document_ForwardDataEntry_DoNotUseDefaultTypeInternal _Document_ForwardDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Document_VectorFieldInfoEntry_DoNotUse::Document_VectorFieldInfoEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Document_VectorFieldInfoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Document_VectorFieldInfoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Document_VectorFieldInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Document_VectorFieldInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Document_VectorFieldInfoEntry_DoNotUseDefaultTypeInternal _Document_VectorFieldInfoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Document::Document(
    ::_pbi::ConstantInitialized)
  : inverted_info_()
  , field_info_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , restriction_info_()
  , forward_data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , vector_field_info_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , doc_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DocumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentDefaultTypeInternal() {}
  union {
    Document _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentDefaultTypeInternal _Document_default_instance_;
PROTOBUF_CONSTEXPR FieldInfo::FieldInfo(
    ::_pbi::ConstantInitialized)
  : field_len_(0u){}
struct FieldInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldInfoDefaultTypeInternal() {}
  union {
    FieldInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
PROTOBUF_CONSTEXPR InvertedTerm::InvertedTerm(
    ::_pbi::ConstantInitialized)
  : field_()
  , term_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , score_(0){}
struct InvertedTermDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvertedTermDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvertedTermDefaultTypeInternal() {}
  union {
    InvertedTerm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvertedTermDefaultTypeInternal _InvertedTerm_default_instance_;
PROTOBUF_CONSTEXPR InvertedTermField::InvertedTermField(
    ::_pbi::ConstantInitialized)
  : offset_()
  , _offset_cached_byte_size_(0)
  , payload_()
  , multi_value_index_()
  , _multi_value_index_cached_byte_size_(0)
  , field_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , doc_term_payload_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , score_(0){}
struct InvertedTermFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvertedTermFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvertedTermFieldDefaultTypeInternal() {}
  union {
    InvertedTermField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvertedTermFieldDefaultTypeInternal _InvertedTermField_default_instance_;
PROTOBUF_CONSTEXPR RestrictionInfo::RestrictionInfo(
    ::_pbi::ConstantInitialized)
  : value_()
  , field_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct RestrictionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RestrictionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RestrictionInfoDefaultTypeInternal() {}
  union {
    RestrictionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RestrictionInfoDefaultTypeInternal _RestrictionInfo_default_instance_;
PROTOBUF_CONSTEXPR VectorField::VectorField(
    ::_pbi::ConstantInitialized)
  : value_(){}
struct VectorFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorFieldDefaultTypeInternal() {}
  union {
    VectorField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorFieldDefaultTypeInternal _VectorField_default_instance_;
}  // namespace search_engine
static ::_pb::Metadata file_level_metadata_lambda_2fproto_2fdocument_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_lambda_2fproto_2fdocument_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_lambda_2fproto_2fdocument_2eproto = nullptr;

const uint32_t TableStruct_lambda_2fproto_2fdocument_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::search_engine::ForwardDataField, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::search_engine::ForwardDataField, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::search_engine::ForwardDataField, data_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_FieldInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_FieldInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_FieldInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_FieldInfoEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_ForwardDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_ForwardDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_ForwardDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_ForwardDataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_VectorFieldInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_VectorFieldInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_VectorFieldInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document_VectorFieldInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::search_engine::Document, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::search_engine::Document, doc_id_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document, inverted_info_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document, field_info_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document, restriction_info_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document, forward_data_),
  PROTOBUF_FIELD_OFFSET(::search_engine::Document, vector_field_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::search_engine::FieldInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::search_engine::FieldInfo, field_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::search_engine::InvertedTerm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::search_engine::InvertedTerm, term_),
  PROTOBUF_FIELD_OFFSET(::search_engine::InvertedTerm, field_),
  PROTOBUF_FIELD_OFFSET(::search_engine::InvertedTerm, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::search_engine::InvertedTermField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::search_engine::InvertedTermField, field_name_),
  PROTOBUF_FIELD_OFFSET(::search_engine::InvertedTermField, offset_),
  PROTOBUF_FIELD_OFFSET(::search_engine::InvertedTermField, score_),
  PROTOBUF_FIELD_OFFSET(::search_engine::InvertedTermField, payload_),
  PROTOBUF_FIELD_OFFSET(::search_engine::InvertedTermField, multi_value_index_),
  PROTOBUF_FIELD_OFFSET(::search_engine::InvertedTermField, doc_term_payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::search_engine::RestrictionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::search_engine::RestrictionInfo, field_),
  PROTOBUF_FIELD_OFFSET(::search_engine::RestrictionInfo, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::search_engine::VectorField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::search_engine::VectorField, value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::search_engine::ForwardDataField)},
  { 9, 17, -1, sizeof(::search_engine::Document_FieldInfoEntry_DoNotUse)},
  { 19, 27, -1, sizeof(::search_engine::Document_ForwardDataEntry_DoNotUse)},
  { 29, 37, -1, sizeof(::search_engine::Document_VectorFieldInfoEntry_DoNotUse)},
  { 39, -1, -1, sizeof(::search_engine::Document)},
  { 51, -1, -1, sizeof(::search_engine::FieldInfo)},
  { 58, -1, -1, sizeof(::search_engine::InvertedTerm)},
  { 67, -1, -1, sizeof(::search_engine::InvertedTermField)},
  { 79, -1, -1, sizeof(::search_engine::RestrictionInfo)},
  { 87, -1, -1, sizeof(::search_engine::VectorField)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::search_engine::_ForwardDataField_default_instance_._instance,
  &::search_engine::_Document_FieldInfoEntry_DoNotUse_default_instance_._instance,
  &::search_engine::_Document_ForwardDataEntry_DoNotUse_default_instance_._instance,
  &::search_engine::_Document_VectorFieldInfoEntry_DoNotUse_default_instance_._instance,
  &::search_engine::_Document_default_instance_._instance,
  &::search_engine::_FieldInfo_default_instance_._instance,
  &::search_engine::_InvertedTerm_default_instance_._instance,
  &::search_engine::_InvertedTermField_default_instance_._instance,
  &::search_engine::_RestrictionInfo_default_instance_._instance,
  &::search_engine::_VectorField_default_instance_._instance,
};

const char descriptor_table_protodef_lambda_2fproto_2fdocument_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033lambda/proto/document.proto\022\rsearch_en"
  "gine\032\034google/protobuf/struct.proto\"Z\n\020Fo"
  "rwardDataField\022\'\n\005value\030\001 \001(\0132\026.google.p"
  "rotobuf.ValueH\000\022\025\n\013bytes_value\030\002 \001(\014H\000B\006"
  "\n\004data\"\302\004\n\010Document\022\016\n\006doc_id\030\001 \001(\t\0222\n\ri"
  "nverted_info\030\002 \003(\0132\033.search_engine.Inver"
  "tedTerm\022:\n\nfield_info\030\003 \003(\0132&.search_eng"
  "ine.Document.FieldInfoEntry\0228\n\020restricti"
  "on_info\030\004 \003(\0132\036.search_engine.Restrictio"
  "nInfo\022>\n\014forward_data\030\005 \003(\0132(.search_eng"
  "ine.Document.ForwardDataEntry\022G\n\021vector_"
  "field_info\030\006 \003(\0132,.search_engine.Documen"
  "t.VectorFieldInfoEntry\032J\n\016FieldInfoEntry"
  "\022\013\n\003key\030\001 \001(\t\022\'\n\005value\030\002 \001(\0132\030.search_en"
  "gine.FieldInfo:\0028\001\032S\n\020ForwardDataEntry\022\013"
  "\n\003key\030\001 \001(\t\022.\n\005value\030\002 \001(\0132\037.search_engi"
  "ne.ForwardDataField:\0028\001\032R\n\024VectorFieldIn"
  "foEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.se"
  "arch_engine.VectorField:\0028\001\"\036\n\tFieldInfo"
  "\022\021\n\tfield_len\030\001 \001(\r\"\\\n\014InvertedTerm\022\014\n\004t"
  "erm\030\001 \001(\t\022/\n\005field\030\002 \003(\0132 .search_engine"
  ".InvertedTermField\022\r\n\005score\030\003 \001(\001\"\214\001\n\021In"
  "vertedTermField\022\022\n\nfield_name\030\001 \001(\t\022\016\n\006o"
  "ffset\030\002 \003(\r\022\r\n\005score\030\003 \001(\001\022\017\n\007payload\030\004 "
  "\003(\014\022\031\n\021multi_value_index\030\005 \003(\r\022\030\n\020doc_te"
  "rm_payload\030\006 \001(\014\"/\n\017RestrictionInfo\022\r\n\005f"
  "ield\030\001 \001(\t\022\r\n\005value\030\002 \003(\t\"\034\n\013VectorField"
  "\022\r\n\005value\030\001 \003(\002b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_lambda_2fproto_2fdocument_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_lambda_2fproto_2fdocument_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_lambda_2fproto_2fdocument_2eproto = {
    false, false, 1103, descriptor_table_protodef_lambda_2fproto_2fdocument_2eproto,
    "lambda/proto/document.proto",
    &descriptor_table_lambda_2fproto_2fdocument_2eproto_once, descriptor_table_lambda_2fproto_2fdocument_2eproto_deps, 1, 10,
    schemas, file_default_instances, TableStruct_lambda_2fproto_2fdocument_2eproto::offsets,
    file_level_metadata_lambda_2fproto_2fdocument_2eproto, file_level_enum_descriptors_lambda_2fproto_2fdocument_2eproto,
    file_level_service_descriptors_lambda_2fproto_2fdocument_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_lambda_2fproto_2fdocument_2eproto_getter() {
  return &descriptor_table_lambda_2fproto_2fdocument_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_lambda_2fproto_2fdocument_2eproto(&descriptor_table_lambda_2fproto_2fdocument_2eproto);
namespace search_engine {

// ===================================================================

class ForwardDataField::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Value& value(const ForwardDataField* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Value&
ForwardDataField::_Internal::value(const ForwardDataField* msg) {
  return *msg->data_.value_;
}
void ForwardDataField::set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
    data_.value_ = value;
  }
  // @@protoc_insertion_point(field_set_allocated:search_engine.ForwardDataField.value)
}
void ForwardDataField::clear_value() {
  if (_internal_has_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.value_;
    }
    clear_has_data();
  }
}
ForwardDataField::ForwardDataField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:search_engine.ForwardDataField)
}
ForwardDataField::ForwardDataField(const ForwardDataField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kValue: {
      _internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_value());
      break;
    }
    case kBytesValue: {
      _internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:search_engine.ForwardDataField)
}

inline void ForwardDataField::SharedCtor() {
clear_has_data();
}

ForwardDataField::~ForwardDataField() {
  // @@protoc_insertion_point(destructor:search_engine.ForwardDataField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForwardDataField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void ForwardDataField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForwardDataField::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:search_engine.ForwardDataField)
  switch (data_case()) {
    case kValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.value_;
      }
      break;
    }
    case kBytesValue: {
      data_.bytes_value_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void ForwardDataField::Clear() {
// @@protoc_insertion_point(message_clear_start:search_engine.ForwardDataField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardDataField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Value value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bytes_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bytes_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForwardDataField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:search_engine.ForwardDataField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Value value = 1;
  if (_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // bytes bytes_value = 2;
  if (_internal_has_bytes_value()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bytes_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:search_engine.ForwardDataField)
  return target;
}

size_t ForwardDataField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:search_engine.ForwardDataField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .google.protobuf.Value value = 1;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.value_);
      break;
    }
    // bytes bytes_value = 2;
    case kBytesValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardDataField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ForwardDataField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardDataField::GetClassData() const { return &_class_data_; }

void ForwardDataField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ForwardDataField *>(to)->MergeFrom(
      static_cast<const ForwardDataField &>(from));
}


void ForwardDataField::MergeFrom(const ForwardDataField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:search_engine.ForwardDataField)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kValue: {
      _internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_value());
      break;
    }
    case kBytesValue: {
      _internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardDataField::CopyFrom(const ForwardDataField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:search_engine.ForwardDataField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardDataField::IsInitialized() const {
  return true;
}

void ForwardDataField::InternalSwap(ForwardDataField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardDataField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lambda_2fproto_2fdocument_2eproto_getter, &descriptor_table_lambda_2fproto_2fdocument_2eproto_once,
      file_level_metadata_lambda_2fproto_2fdocument_2eproto[0]);
}

// ===================================================================

Document_FieldInfoEntry_DoNotUse::Document_FieldInfoEntry_DoNotUse() {}
Document_FieldInfoEntry_DoNotUse::Document_FieldInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Document_FieldInfoEntry_DoNotUse::MergeFrom(const Document_FieldInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Document_FieldInfoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lambda_2fproto_2fdocument_2eproto_getter, &descriptor_table_lambda_2fproto_2fdocument_2eproto_once,
      file_level_metadata_lambda_2fproto_2fdocument_2eproto[1]);
}

// ===================================================================

Document_ForwardDataEntry_DoNotUse::Document_ForwardDataEntry_DoNotUse() {}
Document_ForwardDataEntry_DoNotUse::Document_ForwardDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Document_ForwardDataEntry_DoNotUse::MergeFrom(const Document_ForwardDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Document_ForwardDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lambda_2fproto_2fdocument_2eproto_getter, &descriptor_table_lambda_2fproto_2fdocument_2eproto_once,
      file_level_metadata_lambda_2fproto_2fdocument_2eproto[2]);
}

// ===================================================================

Document_VectorFieldInfoEntry_DoNotUse::Document_VectorFieldInfoEntry_DoNotUse() {}
Document_VectorFieldInfoEntry_DoNotUse::Document_VectorFieldInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Document_VectorFieldInfoEntry_DoNotUse::MergeFrom(const Document_VectorFieldInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Document_VectorFieldInfoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lambda_2fproto_2fdocument_2eproto_getter, &descriptor_table_lambda_2fproto_2fdocument_2eproto_once,
      file_level_metadata_lambda_2fproto_2fdocument_2eproto[3]);
}

// ===================================================================

class Document::_Internal {
 public:
};

Document::Document(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inverted_info_(arena),
  field_info_(arena),
  restriction_info_(arena),
  forward_data_(arena),
  vector_field_info_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Document::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:search_engine.Document)
}
Document::Document(const Document& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inverted_info_(from.inverted_info_),
      restriction_info_(from.restriction_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_info_.MergeFrom(from.field_info_);
  forward_data_.MergeFrom(from.forward_data_);
  vector_field_info_.MergeFrom(from.vector_field_info_);
  doc_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    doc_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_doc_id().empty()) {
    doc_id_.Set(from._internal_doc_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:search_engine.Document)
}

inline void Document::SharedCtor() {
doc_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  doc_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:search_engine.Document)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Document::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  field_info_.Destruct();
  forward_data_.Destruct();
  vector_field_info_.Destruct();
  doc_id_.Destroy();
}

void Document::ArenaDtor(void* object) {
  Document* _this = reinterpret_cast< Document* >(object);
  _this->field_info_.Destruct();
  _this->forward_data_.Destruct();
  _this->vector_field_info_.Destruct();
}
void Document::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:search_engine.Document)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inverted_info_.Clear();
  field_info_.Clear();
  restriction_info_.Clear();
  forward_data_.Clear();
  vector_field_info_.Clear();
  doc_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Document::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string doc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_doc_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "search_engine.Document.doc_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .search_engine.InvertedTerm inverted_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inverted_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .search_engine.FieldInfo> field_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&field_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .search_engine.RestrictionInfo restriction_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_restriction_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .search_engine.ForwardDataField> forward_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&forward_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .search_engine.VectorField> vector_field_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vector_field_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Document::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:search_engine.Document)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string doc_id = 1;
  if (!this->_internal_doc_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc_id().data(), static_cast<int>(this->_internal_doc_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "search_engine.Document.doc_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_doc_id(), target);
  }

  // repeated .search_engine.InvertedTerm inverted_info = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inverted_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_inverted_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .search_engine.FieldInfo> field_info = 3;
  if (!this->_internal_field_info().empty()) {
    using MapType = ::_pb::Map<std::string, ::search_engine::FieldInfo>;
    using WireHelper = Document_FieldInfoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_field_info();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "search_engine.Document.FieldInfoEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .search_engine.RestrictionInfo restriction_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_restriction_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_restriction_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .search_engine.ForwardDataField> forward_data = 5;
  if (!this->_internal_forward_data().empty()) {
    using MapType = ::_pb::Map<std::string, ::search_engine::ForwardDataField>;
    using WireHelper = Document_ForwardDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_forward_data();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "search_engine.Document.ForwardDataEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .search_engine.VectorField> vector_field_info = 6;
  if (!this->_internal_vector_field_info().empty()) {
    using MapType = ::_pb::Map<std::string, ::search_engine::VectorField>;
    using WireHelper = Document_VectorFieldInfoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_vector_field_info();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "search_engine.Document.VectorFieldInfoEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:search_engine.Document)
  return target;
}

size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:search_engine.Document)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .search_engine.InvertedTerm inverted_info = 2;
  total_size += 1UL * this->_internal_inverted_info_size();
  for (const auto& msg : this->inverted_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .search_engine.FieldInfo> field_info = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_field_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::FieldInfo >::const_iterator
      it = this->_internal_field_info().begin();
      it != this->_internal_field_info().end(); ++it) {
    total_size += Document_FieldInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .search_engine.RestrictionInfo restriction_info = 4;
  total_size += 1UL * this->_internal_restriction_info_size();
  for (const auto& msg : this->restriction_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .search_engine.ForwardDataField> forward_data = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_forward_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::ForwardDataField >::const_iterator
      it = this->_internal_forward_data().begin();
      it != this->_internal_forward_data().end(); ++it) {
    total_size += Document_ForwardDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .search_engine.VectorField> vector_field_info = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vector_field_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::VectorField >::const_iterator
      it = this->_internal_vector_field_info().begin();
      it != this->_internal_vector_field_info().end(); ++it) {
    total_size += Document_VectorFieldInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string doc_id = 1;
  if (!this->_internal_doc_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Document::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Document::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Document::GetClassData() const { return &_class_data_; }

void Document::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Document *>(to)->MergeFrom(
      static_cast<const Document &>(from));
}


void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:search_engine.Document)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inverted_info_.MergeFrom(from.inverted_info_);
  field_info_.MergeFrom(from.field_info_);
  restriction_info_.MergeFrom(from.restriction_info_);
  forward_data_.MergeFrom(from.forward_data_);
  vector_field_info_.MergeFrom(from.vector_field_info_);
  if (!from._internal_doc_id().empty()) {
    _internal_set_doc_id(from._internal_doc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:search_engine.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  return true;
}

void Document::InternalSwap(Document* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inverted_info_.InternalSwap(&other->inverted_info_);
  field_info_.InternalSwap(&other->field_info_);
  restriction_info_.InternalSwap(&other->restriction_info_);
  forward_data_.InternalSwap(&other->forward_data_);
  vector_field_info_.InternalSwap(&other->vector_field_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &doc_id_, lhs_arena,
      &other->doc_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Document::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lambda_2fproto_2fdocument_2eproto_getter, &descriptor_table_lambda_2fproto_2fdocument_2eproto_once,
      file_level_metadata_lambda_2fproto_2fdocument_2eproto[4]);
}

// ===================================================================

class FieldInfo::_Internal {
 public:
};

FieldInfo::FieldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:search_engine.FieldInfo)
}
FieldInfo::FieldInfo(const FieldInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_len_ = from.field_len_;
  // @@protoc_insertion_point(copy_constructor:search_engine.FieldInfo)
}

inline void FieldInfo::SharedCtor() {
field_len_ = 0u;
}

FieldInfo::~FieldInfo() {
  // @@protoc_insertion_point(destructor:search_engine.FieldInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FieldInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:search_engine.FieldInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_len_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 field_len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          field_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:search_engine.FieldInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 field_len = 1;
  if (this->_internal_field_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_field_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:search_engine.FieldInfo)
  return target;
}

size_t FieldInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:search_engine.FieldInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 field_len = 1;
  if (this->_internal_field_len() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_field_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldInfo::GetClassData() const { return &_class_data_; }

void FieldInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldInfo *>(to)->MergeFrom(
      static_cast<const FieldInfo &>(from));
}


void FieldInfo::MergeFrom(const FieldInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:search_engine.FieldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_field_len() != 0) {
    _internal_set_field_len(from._internal_field_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldInfo::CopyFrom(const FieldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:search_engine.FieldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldInfo::IsInitialized() const {
  return true;
}

void FieldInfo::InternalSwap(FieldInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(field_len_, other->field_len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lambda_2fproto_2fdocument_2eproto_getter, &descriptor_table_lambda_2fproto_2fdocument_2eproto_once,
      file_level_metadata_lambda_2fproto_2fdocument_2eproto[5]);
}

// ===================================================================

class InvertedTerm::_Internal {
 public:
};

InvertedTerm::InvertedTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  field_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:search_engine.InvertedTerm)
}
InvertedTerm::InvertedTerm(const InvertedTerm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  term_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    term_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_term().empty()) {
    term_.Set(from._internal_term(), 
      GetArenaForAllocation());
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:search_engine.InvertedTerm)
}

inline void InvertedTerm::SharedCtor() {
term_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  term_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
score_ = 0;
}

InvertedTerm::~InvertedTerm() {
  // @@protoc_insertion_point(destructor:search_engine.InvertedTerm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvertedTerm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  term_.Destroy();
}

void InvertedTerm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvertedTerm::Clear() {
// @@protoc_insertion_point(message_clear_start:search_engine.InvertedTerm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  term_.ClearToEmpty();
  score_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvertedTerm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_term();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "search_engine.InvertedTerm.term"));
        } else
          goto handle_unusual;
        continue;
      // repeated .search_engine.InvertedTermField field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvertedTerm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:search_engine.InvertedTerm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string term = 1;
  if (!this->_internal_term().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_term().data(), static_cast<int>(this->_internal_term().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "search_engine.InvertedTerm.term");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_term(), target);
  }

  // repeated .search_engine.InvertedTermField field = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_size()); i < n; i++) {
    const auto& repfield = this->_internal_field(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double score = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:search_engine.InvertedTerm)
  return target;
}

size_t InvertedTerm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:search_engine.InvertedTerm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .search_engine.InvertedTermField field = 2;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string term = 1;
  if (!this->_internal_term().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_term());
  }

  // double score = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvertedTerm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvertedTerm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvertedTerm::GetClassData() const { return &_class_data_; }

void InvertedTerm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvertedTerm *>(to)->MergeFrom(
      static_cast<const InvertedTerm &>(from));
}


void InvertedTerm::MergeFrom(const InvertedTerm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:search_engine.InvertedTerm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  if (!from._internal_term().empty()) {
    _internal_set_term(from._internal_term());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = from._internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvertedTerm::CopyFrom(const InvertedTerm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:search_engine.InvertedTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvertedTerm::IsInitialized() const {
  return true;
}

void InvertedTerm::InternalSwap(InvertedTerm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &term_, lhs_arena,
      &other->term_, rhs_arena
  );
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvertedTerm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lambda_2fproto_2fdocument_2eproto_getter, &descriptor_table_lambda_2fproto_2fdocument_2eproto_once,
      file_level_metadata_lambda_2fproto_2fdocument_2eproto[6]);
}

// ===================================================================

class InvertedTermField::_Internal {
 public:
};

InvertedTermField::InvertedTermField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  offset_(arena),
  payload_(arena),
  multi_value_index_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:search_engine.InvertedTermField)
}
InvertedTermField::InvertedTermField(const InvertedTermField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      offset_(from.offset_),
      payload_(from.payload_),
      multi_value_index_(from.multi_value_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    field_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_name().empty()) {
    field_name_.Set(from._internal_field_name(), 
      GetArenaForAllocation());
  }
  doc_term_payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    doc_term_payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_doc_term_payload().empty()) {
    doc_term_payload_.Set(from._internal_doc_term_payload(), 
      GetArenaForAllocation());
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:search_engine.InvertedTermField)
}

inline void InvertedTermField::SharedCtor() {
field_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  field_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
doc_term_payload_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  doc_term_payload_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
score_ = 0;
}

InvertedTermField::~InvertedTermField() {
  // @@protoc_insertion_point(destructor:search_engine.InvertedTermField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvertedTermField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  field_name_.Destroy();
  doc_term_payload_.Destroy();
}

void InvertedTermField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvertedTermField::Clear() {
// @@protoc_insertion_point(message_clear_start:search_engine.InvertedTermField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_.Clear();
  payload_.Clear();
  multi_value_index_.Clear();
  field_name_.ClearToEmpty();
  doc_term_payload_.ClearToEmpty();
  score_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvertedTermField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "search_engine.InvertedTermField.field_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_payload();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 multi_value_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_multi_value_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_multi_value_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes doc_term_payload = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_doc_term_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvertedTermField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:search_engine.InvertedTermField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_name = 1;
  if (!this->_internal_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "search_engine.InvertedTermField.field_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field_name(), target);
  }

  // repeated uint32 offset = 2;
  {
    int byte_size = _offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_offset(), byte_size, target);
    }
  }

  // double score = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_score(), target);
  }

  // repeated bytes payload = 4;
  for (int i = 0, n = this->_internal_payload_size(); i < n; i++) {
    const auto& s = this->_internal_payload(i);
    target = stream->WriteBytes(4, s, target);
  }

  // repeated uint32 multi_value_index = 5;
  {
    int byte_size = _multi_value_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_multi_value_index(), byte_size, target);
    }
  }

  // bytes doc_term_payload = 6;
  if (!this->_internal_doc_term_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_doc_term_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:search_engine.InvertedTermField)
  return target;
}

size_t InvertedTermField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:search_engine.InvertedTermField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 offset = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes payload = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(payload_.size());
  for (int i = 0, n = payload_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      payload_.Get(i));
  }

  // repeated uint32 multi_value_index = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->multi_value_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _multi_value_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string field_name = 1;
  if (!this->_internal_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // bytes doc_term_payload = 6;
  if (!this->_internal_doc_term_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_doc_term_payload());
  }

  // double score = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvertedTermField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvertedTermField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvertedTermField::GetClassData() const { return &_class_data_; }

void InvertedTermField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvertedTermField *>(to)->MergeFrom(
      static_cast<const InvertedTermField &>(from));
}


void InvertedTermField::MergeFrom(const InvertedTermField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:search_engine.InvertedTermField)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  offset_.MergeFrom(from.offset_);
  payload_.MergeFrom(from.payload_);
  multi_value_index_.MergeFrom(from.multi_value_index_);
  if (!from._internal_field_name().empty()) {
    _internal_set_field_name(from._internal_field_name());
  }
  if (!from._internal_doc_term_payload().empty()) {
    _internal_set_doc_term_payload(from._internal_doc_term_payload());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = from._internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvertedTermField::CopyFrom(const InvertedTermField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:search_engine.InvertedTermField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvertedTermField::IsInitialized() const {
  return true;
}

void InvertedTermField::InternalSwap(InvertedTermField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  offset_.InternalSwap(&other->offset_);
  payload_.InternalSwap(&other->payload_);
  multi_value_index_.InternalSwap(&other->multi_value_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &field_name_, lhs_arena,
      &other->field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &doc_term_payload_, lhs_arena,
      &other->doc_term_payload_, rhs_arena
  );
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvertedTermField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lambda_2fproto_2fdocument_2eproto_getter, &descriptor_table_lambda_2fproto_2fdocument_2eproto_once,
      file_level_metadata_lambda_2fproto_2fdocument_2eproto[7]);
}

// ===================================================================

class RestrictionInfo::_Internal {
 public:
};

RestrictionInfo::RestrictionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:search_engine.RestrictionInfo)
}
RestrictionInfo::RestrictionInfo(const RestrictionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    field_.Set(from._internal_field(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:search_engine.RestrictionInfo)
}

inline void RestrictionInfo::SharedCtor() {
field_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  field_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RestrictionInfo::~RestrictionInfo() {
  // @@protoc_insertion_point(destructor:search_engine.RestrictionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RestrictionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  field_.Destroy();
}

void RestrictionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RestrictionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:search_engine.RestrictionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  field_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestrictionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "search_engine.RestrictionInfo.field"));
        } else
          goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "search_engine.RestrictionInfo.value"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RestrictionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:search_engine.RestrictionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "search_engine.RestrictionInfo.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "search_engine.RestrictionInfo.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:search_engine.RestrictionInfo)
  return target;
}

size_t RestrictionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:search_engine.RestrictionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RestrictionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RestrictionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RestrictionInfo::GetClassData() const { return &_class_data_; }

void RestrictionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RestrictionInfo *>(to)->MergeFrom(
      static_cast<const RestrictionInfo &>(from));
}


void RestrictionInfo::MergeFrom(const RestrictionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:search_engine.RestrictionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (!from._internal_field().empty()) {
    _internal_set_field(from._internal_field());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RestrictionInfo::CopyFrom(const RestrictionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:search_engine.RestrictionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestrictionInfo::IsInitialized() const {
  return true;
}

void RestrictionInfo::InternalSwap(RestrictionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &field_, lhs_arena,
      &other->field_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RestrictionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lambda_2fproto_2fdocument_2eproto_getter, &descriptor_table_lambda_2fproto_2fdocument_2eproto_once,
      file_level_metadata_lambda_2fproto_2fdocument_2eproto[8]);
}

// ===================================================================

class VectorField::_Internal {
 public:
};

VectorField::VectorField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:search_engine.VectorField)
}
VectorField::VectorField(const VectorField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:search_engine.VectorField)
}

inline void VectorField::SharedCtor() {
}

VectorField::~VectorField() {
  // @@protoc_insertion_point(destructor:search_engine.VectorField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorField::Clear() {
// @@protoc_insertion_point(message_clear_start:search_engine.VectorField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:search_engine.VectorField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1;
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:search_engine.VectorField)
  return target;
}

size_t VectorField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:search_engine.VectorField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorField::GetClassData() const { return &_class_data_; }

void VectorField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorField *>(to)->MergeFrom(
      static_cast<const VectorField &>(from));
}


void VectorField::MergeFrom(const VectorField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:search_engine.VectorField)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorField::CopyFrom(const VectorField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:search_engine.VectorField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorField::IsInitialized() const {
  return true;
}

void VectorField::InternalSwap(VectorField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lambda_2fproto_2fdocument_2eproto_getter, &descriptor_table_lambda_2fproto_2fdocument_2eproto_once,
      file_level_metadata_lambda_2fproto_2fdocument_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace search_engine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::search_engine::ForwardDataField*
Arena::CreateMaybeMessage< ::search_engine::ForwardDataField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search_engine::ForwardDataField >(arena);
}
template<> PROTOBUF_NOINLINE ::search_engine::Document_FieldInfoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::search_engine::Document_FieldInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search_engine::Document_FieldInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::search_engine::Document_ForwardDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::search_engine::Document_ForwardDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search_engine::Document_ForwardDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::search_engine::Document_VectorFieldInfoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::search_engine::Document_VectorFieldInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search_engine::Document_VectorFieldInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::search_engine::Document*
Arena::CreateMaybeMessage< ::search_engine::Document >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search_engine::Document >(arena);
}
template<> PROTOBUF_NOINLINE ::search_engine::FieldInfo*
Arena::CreateMaybeMessage< ::search_engine::FieldInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search_engine::FieldInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::search_engine::InvertedTerm*
Arena::CreateMaybeMessage< ::search_engine::InvertedTerm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search_engine::InvertedTerm >(arena);
}
template<> PROTOBUF_NOINLINE ::search_engine::InvertedTermField*
Arena::CreateMaybeMessage< ::search_engine::InvertedTermField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search_engine::InvertedTermField >(arena);
}
template<> PROTOBUF_NOINLINE ::search_engine::RestrictionInfo*
Arena::CreateMaybeMessage< ::search_engine::RestrictionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search_engine::RestrictionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::search_engine::VectorField*
Arena::CreateMaybeMessage< ::search_engine::VectorField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::search_engine::VectorField >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
