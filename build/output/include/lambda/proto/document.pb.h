// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lambda/proto/document.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lambda_2fproto_2fdocument_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lambda_2fproto_2fdocument_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lambda_2fproto_2fdocument_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lambda_2fproto_2fdocument_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lambda_2fproto_2fdocument_2eproto;
namespace search_engine {
class Document;
struct DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class Document_FieldInfoEntry_DoNotUse;
struct Document_FieldInfoEntry_DoNotUseDefaultTypeInternal;
extern Document_FieldInfoEntry_DoNotUseDefaultTypeInternal _Document_FieldInfoEntry_DoNotUse_default_instance_;
class Document_ForwardDataEntry_DoNotUse;
struct Document_ForwardDataEntry_DoNotUseDefaultTypeInternal;
extern Document_ForwardDataEntry_DoNotUseDefaultTypeInternal _Document_ForwardDataEntry_DoNotUse_default_instance_;
class Document_VectorFieldInfoEntry_DoNotUse;
struct Document_VectorFieldInfoEntry_DoNotUseDefaultTypeInternal;
extern Document_VectorFieldInfoEntry_DoNotUseDefaultTypeInternal _Document_VectorFieldInfoEntry_DoNotUse_default_instance_;
class FieldInfo;
struct FieldInfoDefaultTypeInternal;
extern FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
class ForwardDataField;
struct ForwardDataFieldDefaultTypeInternal;
extern ForwardDataFieldDefaultTypeInternal _ForwardDataField_default_instance_;
class InvertedTerm;
struct InvertedTermDefaultTypeInternal;
extern InvertedTermDefaultTypeInternal _InvertedTerm_default_instance_;
class InvertedTermField;
struct InvertedTermFieldDefaultTypeInternal;
extern InvertedTermFieldDefaultTypeInternal _InvertedTermField_default_instance_;
class RestrictionInfo;
struct RestrictionInfoDefaultTypeInternal;
extern RestrictionInfoDefaultTypeInternal _RestrictionInfo_default_instance_;
class VectorField;
struct VectorFieldDefaultTypeInternal;
extern VectorFieldDefaultTypeInternal _VectorField_default_instance_;
}  // namespace search_engine
PROTOBUF_NAMESPACE_OPEN
template<> ::search_engine::Document* Arena::CreateMaybeMessage<::search_engine::Document>(Arena*);
template<> ::search_engine::Document_FieldInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::search_engine::Document_FieldInfoEntry_DoNotUse>(Arena*);
template<> ::search_engine::Document_ForwardDataEntry_DoNotUse* Arena::CreateMaybeMessage<::search_engine::Document_ForwardDataEntry_DoNotUse>(Arena*);
template<> ::search_engine::Document_VectorFieldInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::search_engine::Document_VectorFieldInfoEntry_DoNotUse>(Arena*);
template<> ::search_engine::FieldInfo* Arena::CreateMaybeMessage<::search_engine::FieldInfo>(Arena*);
template<> ::search_engine::ForwardDataField* Arena::CreateMaybeMessage<::search_engine::ForwardDataField>(Arena*);
template<> ::search_engine::InvertedTerm* Arena::CreateMaybeMessage<::search_engine::InvertedTerm>(Arena*);
template<> ::search_engine::InvertedTermField* Arena::CreateMaybeMessage<::search_engine::InvertedTermField>(Arena*);
template<> ::search_engine::RestrictionInfo* Arena::CreateMaybeMessage<::search_engine::RestrictionInfo>(Arena*);
template<> ::search_engine::VectorField* Arena::CreateMaybeMessage<::search_engine::VectorField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace search_engine {

// ===================================================================

class ForwardDataField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search_engine.ForwardDataField) */ {
 public:
  inline ForwardDataField() : ForwardDataField(nullptr) {}
  ~ForwardDataField() override;
  explicit PROTOBUF_CONSTEXPR ForwardDataField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForwardDataField(const ForwardDataField& from);
  ForwardDataField(ForwardDataField&& from) noexcept
    : ForwardDataField() {
    *this = ::std::move(from);
  }

  inline ForwardDataField& operator=(const ForwardDataField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardDataField& operator=(ForwardDataField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForwardDataField& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kValue = 1,
    kBytesValue = 2,
    DATA_NOT_SET = 0,
  };

  static inline const ForwardDataField* internal_default_instance() {
    return reinterpret_cast<const ForwardDataField*>(
               &_ForwardDataField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ForwardDataField& a, ForwardDataField& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardDataField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForwardDataField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForwardDataField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForwardDataField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForwardDataField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ForwardDataField& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardDataField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search_engine.ForwardDataField";
  }
  protected:
  explicit ForwardDataField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kBytesValueFieldNumber = 2,
  };
  // .google.protobuf.Value value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::PROTOBUF_NAMESPACE_ID::Value& value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_value();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_value();
  void set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::PROTOBUF_NAMESPACE_ID::Value* value);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_value();

  // bytes bytes_value = 2;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_NODISCARD std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:search_engine.ForwardDataField)
 private:
  class _Internal;
  void set_has_value();
  void set_has_bytes_value();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::Value* value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_lambda_2fproto_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class Document_FieldInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_FieldInfoEntry_DoNotUse, 
    std::string, ::search_engine::FieldInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_FieldInfoEntry_DoNotUse, 
    std::string, ::search_engine::FieldInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Document_FieldInfoEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Document_FieldInfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Document_FieldInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Document_FieldInfoEntry_DoNotUse& other);
  static const Document_FieldInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Document_FieldInfoEntry_DoNotUse*>(&_Document_FieldInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "search_engine.Document.FieldInfoEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_lambda_2fproto_2fdocument_2eproto;
};

// -------------------------------------------------------------------

class Document_ForwardDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_ForwardDataEntry_DoNotUse, 
    std::string, ::search_engine::ForwardDataField,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_ForwardDataEntry_DoNotUse, 
    std::string, ::search_engine::ForwardDataField,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Document_ForwardDataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Document_ForwardDataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Document_ForwardDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Document_ForwardDataEntry_DoNotUse& other);
  static const Document_ForwardDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Document_ForwardDataEntry_DoNotUse*>(&_Document_ForwardDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "search_engine.Document.ForwardDataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_lambda_2fproto_2fdocument_2eproto;
};

// -------------------------------------------------------------------

class Document_VectorFieldInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_VectorFieldInfoEntry_DoNotUse, 
    std::string, ::search_engine::VectorField,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_VectorFieldInfoEntry_DoNotUse, 
    std::string, ::search_engine::VectorField,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Document_VectorFieldInfoEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Document_VectorFieldInfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Document_VectorFieldInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Document_VectorFieldInfoEntry_DoNotUse& other);
  static const Document_VectorFieldInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Document_VectorFieldInfoEntry_DoNotUse*>(&_Document_VectorFieldInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "search_engine.Document.VectorFieldInfoEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_lambda_2fproto_2fdocument_2eproto;
};

// -------------------------------------------------------------------

class Document final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search_engine.Document) */ {
 public:
  inline Document() : Document(nullptr) {}
  ~Document() override;
  explicit PROTOBUF_CONSTEXPR Document(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Document(const Document& from);
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document& operator=(Document&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Document& default_instance() {
    return *internal_default_instance();
  }
  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }
  inline void Swap(Document* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Document* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Document* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Document>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Document& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Document& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search_engine.Document";
  }
  protected:
  explicit Document(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInvertedInfoFieldNumber = 2,
    kFieldInfoFieldNumber = 3,
    kRestrictionInfoFieldNumber = 4,
    kForwardDataFieldNumber = 5,
    kVectorFieldInfoFieldNumber = 6,
    kDocIdFieldNumber = 1,
  };
  // repeated .search_engine.InvertedTerm inverted_info = 2;
  int inverted_info_size() const;
  private:
  int _internal_inverted_info_size() const;
  public:
  void clear_inverted_info();
  ::search_engine::InvertedTerm* mutable_inverted_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::InvertedTerm >*
      mutable_inverted_info();
  private:
  const ::search_engine::InvertedTerm& _internal_inverted_info(int index) const;
  ::search_engine::InvertedTerm* _internal_add_inverted_info();
  public:
  const ::search_engine::InvertedTerm& inverted_info(int index) const;
  ::search_engine::InvertedTerm* add_inverted_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::InvertedTerm >&
      inverted_info() const;

  // map<string, .search_engine.FieldInfo> field_info = 3;
  int field_info_size() const;
  private:
  int _internal_field_info_size() const;
  public:
  void clear_field_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::FieldInfo >&
      _internal_field_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::FieldInfo >*
      _internal_mutable_field_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::FieldInfo >&
      field_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::FieldInfo >*
      mutable_field_info();

  // repeated .search_engine.RestrictionInfo restriction_info = 4;
  int restriction_info_size() const;
  private:
  int _internal_restriction_info_size() const;
  public:
  void clear_restriction_info();
  ::search_engine::RestrictionInfo* mutable_restriction_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::RestrictionInfo >*
      mutable_restriction_info();
  private:
  const ::search_engine::RestrictionInfo& _internal_restriction_info(int index) const;
  ::search_engine::RestrictionInfo* _internal_add_restriction_info();
  public:
  const ::search_engine::RestrictionInfo& restriction_info(int index) const;
  ::search_engine::RestrictionInfo* add_restriction_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::RestrictionInfo >&
      restriction_info() const;

  // map<string, .search_engine.ForwardDataField> forward_data = 5;
  int forward_data_size() const;
  private:
  int _internal_forward_data_size() const;
  public:
  void clear_forward_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::ForwardDataField >&
      _internal_forward_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::ForwardDataField >*
      _internal_mutable_forward_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::ForwardDataField >&
      forward_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::ForwardDataField >*
      mutable_forward_data();

  // map<string, .search_engine.VectorField> vector_field_info = 6;
  int vector_field_info_size() const;
  private:
  int _internal_vector_field_info_size() const;
  public:
  void clear_vector_field_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::VectorField >&
      _internal_vector_field_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::VectorField >*
      _internal_mutable_vector_field_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::VectorField >&
      vector_field_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::VectorField >*
      mutable_vector_field_info();

  // string doc_id = 1;
  void clear_doc_id();
  const std::string& doc_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_doc_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_doc_id();
  PROTOBUF_NODISCARD std::string* release_doc_id();
  void set_allocated_doc_id(std::string* doc_id);
  private:
  const std::string& _internal_doc_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc_id(const std::string& value);
  std::string* _internal_mutable_doc_id();
  public:

  // @@protoc_insertion_point(class_scope:search_engine.Document)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::InvertedTerm > inverted_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Document_FieldInfoEntry_DoNotUse,
      std::string, ::search_engine::FieldInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> field_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::RestrictionInfo > restriction_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Document_ForwardDataEntry_DoNotUse,
      std::string, ::search_engine::ForwardDataField,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> forward_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Document_VectorFieldInfoEntry_DoNotUse,
      std::string, ::search_engine::VectorField,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> vector_field_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lambda_2fproto_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class FieldInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search_engine.FieldInfo) */ {
 public:
  inline FieldInfo() : FieldInfo(nullptr) {}
  ~FieldInfo() override;
  explicit PROTOBUF_CONSTEXPR FieldInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldInfo(const FieldInfo& from);
  FieldInfo(FieldInfo&& from) noexcept
    : FieldInfo() {
    *this = ::std::move(from);
  }

  inline FieldInfo& operator=(const FieldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldInfo& operator=(FieldInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldInfo* internal_default_instance() {
    return reinterpret_cast<const FieldInfo*>(
               &_FieldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FieldInfo& a, FieldInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search_engine.FieldInfo";
  }
  protected:
  explicit FieldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldLenFieldNumber = 1,
  };
  // uint32 field_len = 1;
  void clear_field_len();
  uint32_t field_len() const;
  void set_field_len(uint32_t value);
  private:
  uint32_t _internal_field_len() const;
  void _internal_set_field_len(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:search_engine.FieldInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t field_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lambda_2fproto_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class InvertedTerm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search_engine.InvertedTerm) */ {
 public:
  inline InvertedTerm() : InvertedTerm(nullptr) {}
  ~InvertedTerm() override;
  explicit PROTOBUF_CONSTEXPR InvertedTerm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvertedTerm(const InvertedTerm& from);
  InvertedTerm(InvertedTerm&& from) noexcept
    : InvertedTerm() {
    *this = ::std::move(from);
  }

  inline InvertedTerm& operator=(const InvertedTerm& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvertedTerm& operator=(InvertedTerm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvertedTerm& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvertedTerm* internal_default_instance() {
    return reinterpret_cast<const InvertedTerm*>(
               &_InvertedTerm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InvertedTerm& a, InvertedTerm& b) {
    a.Swap(&b);
  }
  inline void Swap(InvertedTerm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvertedTerm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvertedTerm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvertedTerm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvertedTerm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvertedTerm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvertedTerm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search_engine.InvertedTerm";
  }
  protected:
  explicit InvertedTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 2,
    kTermFieldNumber = 1,
    kScoreFieldNumber = 3,
  };
  // repeated .search_engine.InvertedTermField field = 2;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::search_engine::InvertedTermField* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::InvertedTermField >*
      mutable_field();
  private:
  const ::search_engine::InvertedTermField& _internal_field(int index) const;
  ::search_engine::InvertedTermField* _internal_add_field();
  public:
  const ::search_engine::InvertedTermField& field(int index) const;
  ::search_engine::InvertedTermField* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::InvertedTermField >&
      field() const;

  // string term = 1;
  void clear_term();
  const std::string& term() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_term(ArgT0&& arg0, ArgT... args);
  std::string* mutable_term();
  PROTOBUF_NODISCARD std::string* release_term();
  void set_allocated_term(std::string* term);
  private:
  const std::string& _internal_term() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_term(const std::string& value);
  std::string* _internal_mutable_term();
  public:

  // double score = 3;
  void clear_score();
  double score() const;
  void set_score(double value);
  private:
  double _internal_score() const;
  void _internal_set_score(double value);
  public:

  // @@protoc_insertion_point(class_scope:search_engine.InvertedTerm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::InvertedTermField > field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr term_;
  double score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lambda_2fproto_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class InvertedTermField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search_engine.InvertedTermField) */ {
 public:
  inline InvertedTermField() : InvertedTermField(nullptr) {}
  ~InvertedTermField() override;
  explicit PROTOBUF_CONSTEXPR InvertedTermField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvertedTermField(const InvertedTermField& from);
  InvertedTermField(InvertedTermField&& from) noexcept
    : InvertedTermField() {
    *this = ::std::move(from);
  }

  inline InvertedTermField& operator=(const InvertedTermField& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvertedTermField& operator=(InvertedTermField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvertedTermField& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvertedTermField* internal_default_instance() {
    return reinterpret_cast<const InvertedTermField*>(
               &_InvertedTermField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InvertedTermField& a, InvertedTermField& b) {
    a.Swap(&b);
  }
  inline void Swap(InvertedTermField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvertedTermField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvertedTermField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvertedTermField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvertedTermField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvertedTermField& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvertedTermField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search_engine.InvertedTermField";
  }
  protected:
  explicit InvertedTermField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kPayloadFieldNumber = 4,
    kMultiValueIndexFieldNumber = 5,
    kFieldNameFieldNumber = 1,
    kDocTermPayloadFieldNumber = 6,
    kScoreFieldNumber = 3,
  };
  // repeated uint32 offset = 2;
  int offset_size() const;
  private:
  int _internal_offset_size() const;
  public:
  void clear_offset();
  private:
  uint32_t _internal_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_offset() const;
  void _internal_add_offset(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_offset();
  public:
  uint32_t offset(int index) const;
  void set_offset(int index, uint32_t value);
  void add_offset(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_offset();

  // repeated bytes payload = 4;
  int payload_size() const;
  private:
  int _internal_payload_size() const;
  public:
  void clear_payload();
  const std::string& payload(int index) const;
  std::string* mutable_payload(int index);
  void set_payload(int index, const std::string& value);
  void set_payload(int index, std::string&& value);
  void set_payload(int index, const char* value);
  void set_payload(int index, const void* value, size_t size);
  std::string* add_payload();
  void add_payload(const std::string& value);
  void add_payload(std::string&& value);
  void add_payload(const char* value);
  void add_payload(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& payload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_payload();
  private:
  const std::string& _internal_payload(int index) const;
  std::string* _internal_add_payload();
  public:

  // repeated uint32 multi_value_index = 5;
  int multi_value_index_size() const;
  private:
  int _internal_multi_value_index_size() const;
  public:
  void clear_multi_value_index();
  private:
  uint32_t _internal_multi_value_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_multi_value_index() const;
  void _internal_add_multi_value_index(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_multi_value_index();
  public:
  uint32_t multi_value_index(int index) const;
  void set_multi_value_index(int index, uint32_t value);
  void add_multi_value_index(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      multi_value_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_multi_value_index();

  // string field_name = 1;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // bytes doc_term_payload = 6;
  void clear_doc_term_payload();
  const std::string& doc_term_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_doc_term_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_doc_term_payload();
  PROTOBUF_NODISCARD std::string* release_doc_term_payload();
  void set_allocated_doc_term_payload(std::string* doc_term_payload);
  private:
  const std::string& _internal_doc_term_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc_term_payload(const std::string& value);
  std::string* _internal_mutable_doc_term_payload();
  public:

  // double score = 3;
  void clear_score();
  double score() const;
  void set_score(double value);
  private:
  double _internal_score() const;
  void _internal_set_score(double value);
  public:

  // @@protoc_insertion_point(class_scope:search_engine.InvertedTermField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > offset_;
  mutable std::atomic<int> _offset_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> payload_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > multi_value_index_;
  mutable std::atomic<int> _multi_value_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_term_payload_;
  double score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lambda_2fproto_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class RestrictionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search_engine.RestrictionInfo) */ {
 public:
  inline RestrictionInfo() : RestrictionInfo(nullptr) {}
  ~RestrictionInfo() override;
  explicit PROTOBUF_CONSTEXPR RestrictionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestrictionInfo(const RestrictionInfo& from);
  RestrictionInfo(RestrictionInfo&& from) noexcept
    : RestrictionInfo() {
    *this = ::std::move(from);
  }

  inline RestrictionInfo& operator=(const RestrictionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestrictionInfo& operator=(RestrictionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RestrictionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RestrictionInfo* internal_default_instance() {
    return reinterpret_cast<const RestrictionInfo*>(
               &_RestrictionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RestrictionInfo& a, RestrictionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RestrictionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestrictionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RestrictionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RestrictionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RestrictionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RestrictionInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestrictionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search_engine.RestrictionInfo";
  }
  protected:
  explicit RestrictionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kFieldFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // string field = 1;
  void clear_field();
  const std::string& field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field();
  PROTOBUF_NODISCARD std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // @@protoc_insertion_point(class_scope:search_engine.RestrictionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lambda_2fproto_2fdocument_2eproto;
};
// -------------------------------------------------------------------

class VectorField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search_engine.VectorField) */ {
 public:
  inline VectorField() : VectorField(nullptr) {}
  ~VectorField() override;
  explicit PROTOBUF_CONSTEXPR VectorField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorField(const VectorField& from);
  VectorField(VectorField&& from) noexcept
    : VectorField() {
    *this = ::std::move(from);
  }

  inline VectorField& operator=(const VectorField& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorField& operator=(VectorField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorField& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorField* internal_default_instance() {
    return reinterpret_cast<const VectorField*>(
               &_VectorField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VectorField& a, VectorField& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VectorField& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search_engine.VectorField";
  }
  protected:
  explicit VectorField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated float value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:search_engine.VectorField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lambda_2fproto_2fdocument_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ForwardDataField

// .google.protobuf.Value value = 1;
inline bool ForwardDataField::_internal_has_value() const {
  return data_case() == kValue;
}
inline bool ForwardDataField::has_value() const {
  return _internal_has_value();
}
inline void ForwardDataField::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* ForwardDataField::release_value() {
  // @@protoc_insertion_point(field_release:search_engine.ForwardDataField.value)
  if (_internal_has_value()) {
    clear_has_data();
    ::PROTOBUF_NAMESPACE_ID::Value* temp = data_.value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& ForwardDataField::_internal_value() const {
  return _internal_has_value()
      ? *data_.value_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Value&>(::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& ForwardDataField::value() const {
  // @@protoc_insertion_point(field_get:search_engine.ForwardDataField.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::Value* ForwardDataField::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:search_engine.ForwardDataField.value)
  if (_internal_has_value()) {
    clear_has_data();
    ::PROTOBUF_NAMESPACE_ID::Value* temp = data_.value_;
    data_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ForwardDataField::unsafe_arena_set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value) {
  clear_data();
  if (value) {
    set_has_value();
    data_.value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:search_engine.ForwardDataField.value)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* ForwardDataField::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_data();
    set_has_value();
    data_.value_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Value >(GetArenaForAllocation());
  }
  return data_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* ForwardDataField::mutable_value() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:search_engine.ForwardDataField.value)
  return _msg;
}

// bytes bytes_value = 2;
inline bool ForwardDataField::_internal_has_bytes_value() const {
  return data_case() == kBytesValue;
}
inline bool ForwardDataField::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void ForwardDataField::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void ForwardDataField::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    data_.bytes_value_.Destroy();
    clear_has_data();
  }
}
inline const std::string& ForwardDataField::bytes_value() const {
  // @@protoc_insertion_point(field_get:search_engine.ForwardDataField.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline void ForwardDataField::set_bytes_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_value()) {
    clear_data();
    set_has_bytes_value();
    data_.bytes_value_.InitDefault();
  }
  data_.bytes_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:search_engine.ForwardDataField.bytes_value)
}
inline std::string* ForwardDataField::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:search_engine.ForwardDataField.bytes_value)
  return _s;
}
inline const std::string& ForwardDataField::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return data_.bytes_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ForwardDataField::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_data();
    set_has_bytes_value();
    data_.bytes_value_.InitDefault();
  }
  data_.bytes_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ForwardDataField::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_data();
    set_has_bytes_value();
    data_.bytes_value_.InitDefault();
  }
  return data_.bytes_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ForwardDataField::release_bytes_value() {
  // @@protoc_insertion_point(field_release:search_engine.ForwardDataField.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_data();
    return data_.bytes_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ForwardDataField::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_data()) {
    clear_data();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    data_.bytes_value_.InitAllocated(bytes_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:search_engine.ForwardDataField.bytes_value)
}

inline bool ForwardDataField::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ForwardDataField::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ForwardDataField::DataCase ForwardDataField::data_case() const {
  return ForwardDataField::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Document

// string doc_id = 1;
inline void Document::clear_doc_id() {
  doc_id_.ClearToEmpty();
}
inline const std::string& Document::doc_id() const {
  // @@protoc_insertion_point(field_get:search_engine.Document.doc_id)
  return _internal_doc_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Document::set_doc_id(ArgT0&& arg0, ArgT... args) {
 
 doc_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:search_engine.Document.doc_id)
}
inline std::string* Document::mutable_doc_id() {
  std::string* _s = _internal_mutable_doc_id();
  // @@protoc_insertion_point(field_mutable:search_engine.Document.doc_id)
  return _s;
}
inline const std::string& Document::_internal_doc_id() const {
  return doc_id_.Get();
}
inline void Document::_internal_set_doc_id(const std::string& value) {
  
  doc_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Document::_internal_mutable_doc_id() {
  
  return doc_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Document::release_doc_id() {
  // @@protoc_insertion_point(field_release:search_engine.Document.doc_id)
  return doc_id_.Release();
}
inline void Document::set_allocated_doc_id(std::string* doc_id) {
  if (doc_id != nullptr) {
    
  } else {
    
  }
  doc_id_.SetAllocated(doc_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (doc_id_.IsDefault()) {
    doc_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:search_engine.Document.doc_id)
}

// repeated .search_engine.InvertedTerm inverted_info = 2;
inline int Document::_internal_inverted_info_size() const {
  return inverted_info_.size();
}
inline int Document::inverted_info_size() const {
  return _internal_inverted_info_size();
}
inline void Document::clear_inverted_info() {
  inverted_info_.Clear();
}
inline ::search_engine::InvertedTerm* Document::mutable_inverted_info(int index) {
  // @@protoc_insertion_point(field_mutable:search_engine.Document.inverted_info)
  return inverted_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::InvertedTerm >*
Document::mutable_inverted_info() {
  // @@protoc_insertion_point(field_mutable_list:search_engine.Document.inverted_info)
  return &inverted_info_;
}
inline const ::search_engine::InvertedTerm& Document::_internal_inverted_info(int index) const {
  return inverted_info_.Get(index);
}
inline const ::search_engine::InvertedTerm& Document::inverted_info(int index) const {
  // @@protoc_insertion_point(field_get:search_engine.Document.inverted_info)
  return _internal_inverted_info(index);
}
inline ::search_engine::InvertedTerm* Document::_internal_add_inverted_info() {
  return inverted_info_.Add();
}
inline ::search_engine::InvertedTerm* Document::add_inverted_info() {
  ::search_engine::InvertedTerm* _add = _internal_add_inverted_info();
  // @@protoc_insertion_point(field_add:search_engine.Document.inverted_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::InvertedTerm >&
Document::inverted_info() const {
  // @@protoc_insertion_point(field_list:search_engine.Document.inverted_info)
  return inverted_info_;
}

// map<string, .search_engine.FieldInfo> field_info = 3;
inline int Document::_internal_field_info_size() const {
  return field_info_.size();
}
inline int Document::field_info_size() const {
  return _internal_field_info_size();
}
inline void Document::clear_field_info() {
  field_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::FieldInfo >&
Document::_internal_field_info() const {
  return field_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::FieldInfo >&
Document::field_info() const {
  // @@protoc_insertion_point(field_map:search_engine.Document.field_info)
  return _internal_field_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::FieldInfo >*
Document::_internal_mutable_field_info() {
  return field_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::FieldInfo >*
Document::mutable_field_info() {
  // @@protoc_insertion_point(field_mutable_map:search_engine.Document.field_info)
  return _internal_mutable_field_info();
}

// repeated .search_engine.RestrictionInfo restriction_info = 4;
inline int Document::_internal_restriction_info_size() const {
  return restriction_info_.size();
}
inline int Document::restriction_info_size() const {
  return _internal_restriction_info_size();
}
inline void Document::clear_restriction_info() {
  restriction_info_.Clear();
}
inline ::search_engine::RestrictionInfo* Document::mutable_restriction_info(int index) {
  // @@protoc_insertion_point(field_mutable:search_engine.Document.restriction_info)
  return restriction_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::RestrictionInfo >*
Document::mutable_restriction_info() {
  // @@protoc_insertion_point(field_mutable_list:search_engine.Document.restriction_info)
  return &restriction_info_;
}
inline const ::search_engine::RestrictionInfo& Document::_internal_restriction_info(int index) const {
  return restriction_info_.Get(index);
}
inline const ::search_engine::RestrictionInfo& Document::restriction_info(int index) const {
  // @@protoc_insertion_point(field_get:search_engine.Document.restriction_info)
  return _internal_restriction_info(index);
}
inline ::search_engine::RestrictionInfo* Document::_internal_add_restriction_info() {
  return restriction_info_.Add();
}
inline ::search_engine::RestrictionInfo* Document::add_restriction_info() {
  ::search_engine::RestrictionInfo* _add = _internal_add_restriction_info();
  // @@protoc_insertion_point(field_add:search_engine.Document.restriction_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::RestrictionInfo >&
Document::restriction_info() const {
  // @@protoc_insertion_point(field_list:search_engine.Document.restriction_info)
  return restriction_info_;
}

// map<string, .search_engine.ForwardDataField> forward_data = 5;
inline int Document::_internal_forward_data_size() const {
  return forward_data_.size();
}
inline int Document::forward_data_size() const {
  return _internal_forward_data_size();
}
inline void Document::clear_forward_data() {
  forward_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::ForwardDataField >&
Document::_internal_forward_data() const {
  return forward_data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::ForwardDataField >&
Document::forward_data() const {
  // @@protoc_insertion_point(field_map:search_engine.Document.forward_data)
  return _internal_forward_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::ForwardDataField >*
Document::_internal_mutable_forward_data() {
  return forward_data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::ForwardDataField >*
Document::mutable_forward_data() {
  // @@protoc_insertion_point(field_mutable_map:search_engine.Document.forward_data)
  return _internal_mutable_forward_data();
}

// map<string, .search_engine.VectorField> vector_field_info = 6;
inline int Document::_internal_vector_field_info_size() const {
  return vector_field_info_.size();
}
inline int Document::vector_field_info_size() const {
  return _internal_vector_field_info_size();
}
inline void Document::clear_vector_field_info() {
  vector_field_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::VectorField >&
Document::_internal_vector_field_info() const {
  return vector_field_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::VectorField >&
Document::vector_field_info() const {
  // @@protoc_insertion_point(field_map:search_engine.Document.vector_field_info)
  return _internal_vector_field_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::VectorField >*
Document::_internal_mutable_vector_field_info() {
  return vector_field_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::search_engine::VectorField >*
Document::mutable_vector_field_info() {
  // @@protoc_insertion_point(field_mutable_map:search_engine.Document.vector_field_info)
  return _internal_mutable_vector_field_info();
}

// -------------------------------------------------------------------

// FieldInfo

// uint32 field_len = 1;
inline void FieldInfo::clear_field_len() {
  field_len_ = 0u;
}
inline uint32_t FieldInfo::_internal_field_len() const {
  return field_len_;
}
inline uint32_t FieldInfo::field_len() const {
  // @@protoc_insertion_point(field_get:search_engine.FieldInfo.field_len)
  return _internal_field_len();
}
inline void FieldInfo::_internal_set_field_len(uint32_t value) {
  
  field_len_ = value;
}
inline void FieldInfo::set_field_len(uint32_t value) {
  _internal_set_field_len(value);
  // @@protoc_insertion_point(field_set:search_engine.FieldInfo.field_len)
}

// -------------------------------------------------------------------

// InvertedTerm

// string term = 1;
inline void InvertedTerm::clear_term() {
  term_.ClearToEmpty();
}
inline const std::string& InvertedTerm::term() const {
  // @@protoc_insertion_point(field_get:search_engine.InvertedTerm.term)
  return _internal_term();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvertedTerm::set_term(ArgT0&& arg0, ArgT... args) {
 
 term_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:search_engine.InvertedTerm.term)
}
inline std::string* InvertedTerm::mutable_term() {
  std::string* _s = _internal_mutable_term();
  // @@protoc_insertion_point(field_mutable:search_engine.InvertedTerm.term)
  return _s;
}
inline const std::string& InvertedTerm::_internal_term() const {
  return term_.Get();
}
inline void InvertedTerm::_internal_set_term(const std::string& value) {
  
  term_.Set(value, GetArenaForAllocation());
}
inline std::string* InvertedTerm::_internal_mutable_term() {
  
  return term_.Mutable(GetArenaForAllocation());
}
inline std::string* InvertedTerm::release_term() {
  // @@protoc_insertion_point(field_release:search_engine.InvertedTerm.term)
  return term_.Release();
}
inline void InvertedTerm::set_allocated_term(std::string* term) {
  if (term != nullptr) {
    
  } else {
    
  }
  term_.SetAllocated(term, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (term_.IsDefault()) {
    term_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:search_engine.InvertedTerm.term)
}

// repeated .search_engine.InvertedTermField field = 2;
inline int InvertedTerm::_internal_field_size() const {
  return field_.size();
}
inline int InvertedTerm::field_size() const {
  return _internal_field_size();
}
inline void InvertedTerm::clear_field() {
  field_.Clear();
}
inline ::search_engine::InvertedTermField* InvertedTerm::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:search_engine.InvertedTerm.field)
  return field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::InvertedTermField >*
InvertedTerm::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:search_engine.InvertedTerm.field)
  return &field_;
}
inline const ::search_engine::InvertedTermField& InvertedTerm::_internal_field(int index) const {
  return field_.Get(index);
}
inline const ::search_engine::InvertedTermField& InvertedTerm::field(int index) const {
  // @@protoc_insertion_point(field_get:search_engine.InvertedTerm.field)
  return _internal_field(index);
}
inline ::search_engine::InvertedTermField* InvertedTerm::_internal_add_field() {
  return field_.Add();
}
inline ::search_engine::InvertedTermField* InvertedTerm::add_field() {
  ::search_engine::InvertedTermField* _add = _internal_add_field();
  // @@protoc_insertion_point(field_add:search_engine.InvertedTerm.field)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search_engine::InvertedTermField >&
InvertedTerm::field() const {
  // @@protoc_insertion_point(field_list:search_engine.InvertedTerm.field)
  return field_;
}

// double score = 3;
inline void InvertedTerm::clear_score() {
  score_ = 0;
}
inline double InvertedTerm::_internal_score() const {
  return score_;
}
inline double InvertedTerm::score() const {
  // @@protoc_insertion_point(field_get:search_engine.InvertedTerm.score)
  return _internal_score();
}
inline void InvertedTerm::_internal_set_score(double value) {
  
  score_ = value;
}
inline void InvertedTerm::set_score(double value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:search_engine.InvertedTerm.score)
}

// -------------------------------------------------------------------

// InvertedTermField

// string field_name = 1;
inline void InvertedTermField::clear_field_name() {
  field_name_.ClearToEmpty();
}
inline const std::string& InvertedTermField::field_name() const {
  // @@protoc_insertion_point(field_get:search_engine.InvertedTermField.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvertedTermField::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 field_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:search_engine.InvertedTermField.field_name)
}
inline std::string* InvertedTermField::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:search_engine.InvertedTermField.field_name)
  return _s;
}
inline const std::string& InvertedTermField::_internal_field_name() const {
  return field_name_.Get();
}
inline void InvertedTermField::_internal_set_field_name(const std::string& value) {
  
  field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* InvertedTermField::_internal_mutable_field_name() {
  
  return field_name_.Mutable(GetArenaForAllocation());
}
inline std::string* InvertedTermField::release_field_name() {
  // @@protoc_insertion_point(field_release:search_engine.InvertedTermField.field_name)
  return field_name_.Release();
}
inline void InvertedTermField::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocated(field_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (field_name_.IsDefault()) {
    field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:search_engine.InvertedTermField.field_name)
}

// repeated uint32 offset = 2;
inline int InvertedTermField::_internal_offset_size() const {
  return offset_.size();
}
inline int InvertedTermField::offset_size() const {
  return _internal_offset_size();
}
inline void InvertedTermField::clear_offset() {
  offset_.Clear();
}
inline uint32_t InvertedTermField::_internal_offset(int index) const {
  return offset_.Get(index);
}
inline uint32_t InvertedTermField::offset(int index) const {
  // @@protoc_insertion_point(field_get:search_engine.InvertedTermField.offset)
  return _internal_offset(index);
}
inline void InvertedTermField::set_offset(int index, uint32_t value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:search_engine.InvertedTermField.offset)
}
inline void InvertedTermField::_internal_add_offset(uint32_t value) {
  offset_.Add(value);
}
inline void InvertedTermField::add_offset(uint32_t value) {
  _internal_add_offset(value);
  // @@protoc_insertion_point(field_add:search_engine.InvertedTermField.offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
InvertedTermField::_internal_offset() const {
  return offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
InvertedTermField::offset() const {
  // @@protoc_insertion_point(field_list:search_engine.InvertedTermField.offset)
  return _internal_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
InvertedTermField::_internal_mutable_offset() {
  return &offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
InvertedTermField::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:search_engine.InvertedTermField.offset)
  return _internal_mutable_offset();
}

// double score = 3;
inline void InvertedTermField::clear_score() {
  score_ = 0;
}
inline double InvertedTermField::_internal_score() const {
  return score_;
}
inline double InvertedTermField::score() const {
  // @@protoc_insertion_point(field_get:search_engine.InvertedTermField.score)
  return _internal_score();
}
inline void InvertedTermField::_internal_set_score(double value) {
  
  score_ = value;
}
inline void InvertedTermField::set_score(double value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:search_engine.InvertedTermField.score)
}

// repeated bytes payload = 4;
inline int InvertedTermField::_internal_payload_size() const {
  return payload_.size();
}
inline int InvertedTermField::payload_size() const {
  return _internal_payload_size();
}
inline void InvertedTermField::clear_payload() {
  payload_.Clear();
}
inline std::string* InvertedTermField::add_payload() {
  std::string* _s = _internal_add_payload();
  // @@protoc_insertion_point(field_add_mutable:search_engine.InvertedTermField.payload)
  return _s;
}
inline const std::string& InvertedTermField::_internal_payload(int index) const {
  return payload_.Get(index);
}
inline const std::string& InvertedTermField::payload(int index) const {
  // @@protoc_insertion_point(field_get:search_engine.InvertedTermField.payload)
  return _internal_payload(index);
}
inline std::string* InvertedTermField::mutable_payload(int index) {
  // @@protoc_insertion_point(field_mutable:search_engine.InvertedTermField.payload)
  return payload_.Mutable(index);
}
inline void InvertedTermField::set_payload(int index, const std::string& value) {
  payload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:search_engine.InvertedTermField.payload)
}
inline void InvertedTermField::set_payload(int index, std::string&& value) {
  payload_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:search_engine.InvertedTermField.payload)
}
inline void InvertedTermField::set_payload(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:search_engine.InvertedTermField.payload)
}
inline void InvertedTermField::set_payload(int index, const void* value, size_t size) {
  payload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:search_engine.InvertedTermField.payload)
}
inline std::string* InvertedTermField::_internal_add_payload() {
  return payload_.Add();
}
inline void InvertedTermField::add_payload(const std::string& value) {
  payload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:search_engine.InvertedTermField.payload)
}
inline void InvertedTermField::add_payload(std::string&& value) {
  payload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:search_engine.InvertedTermField.payload)
}
inline void InvertedTermField::add_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:search_engine.InvertedTermField.payload)
}
inline void InvertedTermField::add_payload(const void* value, size_t size) {
  payload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:search_engine.InvertedTermField.payload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InvertedTermField::payload() const {
  // @@protoc_insertion_point(field_list:search_engine.InvertedTermField.payload)
  return payload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InvertedTermField::mutable_payload() {
  // @@protoc_insertion_point(field_mutable_list:search_engine.InvertedTermField.payload)
  return &payload_;
}

// repeated uint32 multi_value_index = 5;
inline int InvertedTermField::_internal_multi_value_index_size() const {
  return multi_value_index_.size();
}
inline int InvertedTermField::multi_value_index_size() const {
  return _internal_multi_value_index_size();
}
inline void InvertedTermField::clear_multi_value_index() {
  multi_value_index_.Clear();
}
inline uint32_t InvertedTermField::_internal_multi_value_index(int index) const {
  return multi_value_index_.Get(index);
}
inline uint32_t InvertedTermField::multi_value_index(int index) const {
  // @@protoc_insertion_point(field_get:search_engine.InvertedTermField.multi_value_index)
  return _internal_multi_value_index(index);
}
inline void InvertedTermField::set_multi_value_index(int index, uint32_t value) {
  multi_value_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:search_engine.InvertedTermField.multi_value_index)
}
inline void InvertedTermField::_internal_add_multi_value_index(uint32_t value) {
  multi_value_index_.Add(value);
}
inline void InvertedTermField::add_multi_value_index(uint32_t value) {
  _internal_add_multi_value_index(value);
  // @@protoc_insertion_point(field_add:search_engine.InvertedTermField.multi_value_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
InvertedTermField::_internal_multi_value_index() const {
  return multi_value_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
InvertedTermField::multi_value_index() const {
  // @@protoc_insertion_point(field_list:search_engine.InvertedTermField.multi_value_index)
  return _internal_multi_value_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
InvertedTermField::_internal_mutable_multi_value_index() {
  return &multi_value_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
InvertedTermField::mutable_multi_value_index() {
  // @@protoc_insertion_point(field_mutable_list:search_engine.InvertedTermField.multi_value_index)
  return _internal_mutable_multi_value_index();
}

// bytes doc_term_payload = 6;
inline void InvertedTermField::clear_doc_term_payload() {
  doc_term_payload_.ClearToEmpty();
}
inline const std::string& InvertedTermField::doc_term_payload() const {
  // @@protoc_insertion_point(field_get:search_engine.InvertedTermField.doc_term_payload)
  return _internal_doc_term_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvertedTermField::set_doc_term_payload(ArgT0&& arg0, ArgT... args) {
 
 doc_term_payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:search_engine.InvertedTermField.doc_term_payload)
}
inline std::string* InvertedTermField::mutable_doc_term_payload() {
  std::string* _s = _internal_mutable_doc_term_payload();
  // @@protoc_insertion_point(field_mutable:search_engine.InvertedTermField.doc_term_payload)
  return _s;
}
inline const std::string& InvertedTermField::_internal_doc_term_payload() const {
  return doc_term_payload_.Get();
}
inline void InvertedTermField::_internal_set_doc_term_payload(const std::string& value) {
  
  doc_term_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* InvertedTermField::_internal_mutable_doc_term_payload() {
  
  return doc_term_payload_.Mutable(GetArenaForAllocation());
}
inline std::string* InvertedTermField::release_doc_term_payload() {
  // @@protoc_insertion_point(field_release:search_engine.InvertedTermField.doc_term_payload)
  return doc_term_payload_.Release();
}
inline void InvertedTermField::set_allocated_doc_term_payload(std::string* doc_term_payload) {
  if (doc_term_payload != nullptr) {
    
  } else {
    
  }
  doc_term_payload_.SetAllocated(doc_term_payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (doc_term_payload_.IsDefault()) {
    doc_term_payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:search_engine.InvertedTermField.doc_term_payload)
}

// -------------------------------------------------------------------

// RestrictionInfo

// string field = 1;
inline void RestrictionInfo::clear_field() {
  field_.ClearToEmpty();
}
inline const std::string& RestrictionInfo::field() const {
  // @@protoc_insertion_point(field_get:search_engine.RestrictionInfo.field)
  return _internal_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RestrictionInfo::set_field(ArgT0&& arg0, ArgT... args) {
 
 field_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:search_engine.RestrictionInfo.field)
}
inline std::string* RestrictionInfo::mutable_field() {
  std::string* _s = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:search_engine.RestrictionInfo.field)
  return _s;
}
inline const std::string& RestrictionInfo::_internal_field() const {
  return field_.Get();
}
inline void RestrictionInfo::_internal_set_field(const std::string& value) {
  
  field_.Set(value, GetArenaForAllocation());
}
inline std::string* RestrictionInfo::_internal_mutable_field() {
  
  return field_.Mutable(GetArenaForAllocation());
}
inline std::string* RestrictionInfo::release_field() {
  // @@protoc_insertion_point(field_release:search_engine.RestrictionInfo.field)
  return field_.Release();
}
inline void RestrictionInfo::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  field_.SetAllocated(field, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (field_.IsDefault()) {
    field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:search_engine.RestrictionInfo.field)
}

// repeated string value = 2;
inline int RestrictionInfo::_internal_value_size() const {
  return value_.size();
}
inline int RestrictionInfo::value_size() const {
  return _internal_value_size();
}
inline void RestrictionInfo::clear_value() {
  value_.Clear();
}
inline std::string* RestrictionInfo::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:search_engine.RestrictionInfo.value)
  return _s;
}
inline const std::string& RestrictionInfo::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& RestrictionInfo::value(int index) const {
  // @@protoc_insertion_point(field_get:search_engine.RestrictionInfo.value)
  return _internal_value(index);
}
inline std::string* RestrictionInfo::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:search_engine.RestrictionInfo.value)
  return value_.Mutable(index);
}
inline void RestrictionInfo::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:search_engine.RestrictionInfo.value)
}
inline void RestrictionInfo::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:search_engine.RestrictionInfo.value)
}
inline void RestrictionInfo::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:search_engine.RestrictionInfo.value)
}
inline void RestrictionInfo::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:search_engine.RestrictionInfo.value)
}
inline std::string* RestrictionInfo::_internal_add_value() {
  return value_.Add();
}
inline void RestrictionInfo::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:search_engine.RestrictionInfo.value)
}
inline void RestrictionInfo::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:search_engine.RestrictionInfo.value)
}
inline void RestrictionInfo::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:search_engine.RestrictionInfo.value)
}
inline void RestrictionInfo::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:search_engine.RestrictionInfo.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RestrictionInfo::value() const {
  // @@protoc_insertion_point(field_list:search_engine.RestrictionInfo.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RestrictionInfo::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:search_engine.RestrictionInfo.value)
  return &value_;
}

// -------------------------------------------------------------------

// VectorField

// repeated float value = 1;
inline int VectorField::_internal_value_size() const {
  return value_.size();
}
inline int VectorField::value_size() const {
  return _internal_value_size();
}
inline void VectorField::clear_value() {
  value_.Clear();
}
inline float VectorField::_internal_value(int index) const {
  return value_.Get(index);
}
inline float VectorField::value(int index) const {
  // @@protoc_insertion_point(field_get:search_engine.VectorField.value)
  return _internal_value(index);
}
inline void VectorField::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:search_engine.VectorField.value)
}
inline void VectorField::_internal_add_value(float value) {
  value_.Add(value);
}
inline void VectorField::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:search_engine.VectorField.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorField::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorField::value() const {
  // @@protoc_insertion_point(field_list:search_engine.VectorField.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorField::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorField::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:search_engine.VectorField.value)
  return _internal_mutable_value();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace search_engine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lambda_2fproto_2fdocument_2eproto
